<?php

/**
 * @file
 * The Social group secret module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\row\EntityRow;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Prohibit changing group type.
 */
function social_group_secret_form_group_secret_group_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  foreach (array_keys($form['group_type']['#options']) as $type) {
    $form['group_type'][$type]['#disabled'] = TRUE;
  }

  $id = array_search('_social_group_type_edit_submit', $form['actions']['submit']['#submit']);
  unset($form['actions']['submit']['#submit'][$id]);
}

/**
 * Implements hook_views_query_alter().
 *
 * Hide secret groups everywhere when the current user is not a member.
 */
function social_group_secret_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (empty($view->rowPlugin) || !($view->rowPlugin instanceof EntityRow) || $view->rowPlugin->getEntityTypeId() !== 'group') {
    return;
  }

  $account = \Drupal::currentUser();

  if ($account->hasPermission('create secret_group group')) {
    return;
  }

  /** @var \Drupal\group\GroupMembershipLoaderInterface $service */
  $service = \Drupal::service('group.membership_loader');

  $ids = [];

  /** @var \Drupal\group\GroupMembership $membership */
  foreach ($service->loadByUser($account) as $membership) {
    if ($membership->getGroup()->bundle() === 'secret_group') {
      $ids[] = $membership->getGroup()->id();
    }
  }

  /** @var \Drupal\views\Plugin\views\query\Sql $query */
  $group = count($query->where);

  while (isset($query->where[$group])) {
    $group++;
  }

  if ($ids) {
    $ids = \Drupal::entityTypeManager()->getStorage('group')
      ->getQuery()
      ->condition('type', 'secret_group')
      ->condition('id', $ids, 'NOT IN')
      ->execute();

    if ($ids) {
      $query->addWhere($group, 'groups_field_data.id', $ids, 'NOT IN');
    }
  }
  else {
    $query->addWhere($group, 'groups_field_data.type', 'secret_group', '!=');
  }
}

/**
 * Implements hook_social_group_types_alter().
 */
function social_group_secret_social_group_types_alter(array &$social_group_types) {
  $social_group_types[] = 'secret_group';
}

/**
 * Implements hook_social_group_default_visibility_alter().
 */
function social_group_secret_social_group_default_visibility_alter(&$visibility, $group_type_id) {
  if ($group_type_id === 'secret_group') {
    $visibility = 'group';
  }
}

/**
 * Implements hook_social_group_allowed_visibilities_alter().
 */
function social_group_secret_social_group_allowed_visibilities_alter(array &$visibilities, $group_type_id) {
  if ($group_type_id === 'secret_group') {
    foreach ($visibilities as $visibility_name => &$is_visible) {
      $is_visible = $visibility_name === 'group';
    }
  }
}
